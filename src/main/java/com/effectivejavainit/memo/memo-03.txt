1) 생성자를 사용하는 방법 1
    인스턴스가 오로지 하나만 유지해야하는 경우

    - field/IElvis
    싱글톤으로 private 생성자를 만들고
    인스턴스는 하나만 생성하도록 만든다. (static final -> java doc에서 보기 편하게 처리해준다. )
    -> 단점 : 싱글톤을 사용하면 client 코드를 테스트가 어려워진다.

    //IElvis의 클라이언트 코드
    Concert -> public Concert(IElvis elvis) {
                       this.elvis = elvis;
                   }


4) 위에 구구절절 여러가지 문제들이 있는데 가장 좋은 방법으로
 - enumtype/Elvis
    enum은 태생적으로 열거형이라서 new를 통해서 인스턴스를 만들 수 없다. class에서 내부적으로 막아두었다.
    직렬화 , 역직렬화에서 안전하다.
    {
        개발을 하다 보면 아래와 같은 경우가 존재합니다.

        생성한 객체를 파일로 저장할 일이 있을 수도 있습니다.
        저장한 객체를 읽을 일이 생길 수도 있습니다.
        다른 서버에서 생성한 객체를 받을 일도 생길 수 있습니다.

        객체 or 데이터 -> 바이트 (직렬화) : 외부에서 받을 수 있도록
        바이트 -> 객체 (역직렬화)
    }

    java 만으로 싱글톤에 대한 직렬화, 역직렬화 과정을 진행하는 것이 배경지식 + 힘듬...
    하지만 spring에서는 싱글톤을 보장해 주기 때문에 해당 문제를 해결해 준다.

5) 더블콜론(메소드 레퍼런스)를 사용한 sort
    methodreference/Person

6)  함수형 인터페이스
  - MyFunction

  @FunctionalInterface - 하나만 구현되어있음 규약지정

    - DefaultFunctions
    4개의 함수형 인터페이스는 알고 있어라













